#!/usr/bin/env python3

import argparse
import re
import pprint
from colorama import Fore, Style
from lib import finder



helpMessage = Style.BRIGHT + Fore.LIGHTRED_EX + """\
Usage""" + Style.RESET_ALL + """: toad [OPTION...] [file|main]

Parse TODO patterns in a file """ + Style.BRIGHT + Fore.LIGHTRED_EX + """

Options""" + Style.RESET_ALL + """:
  -h, --help                   Show this help message and exit

  -t, --target                 Specifies target pattern
  -o, --output-file            Specifies the output file

  --summary                    Specifies custom summary
  --bullet                     Specifies custom bullet list symbol

  --no-filename                Does not show filename which pattern was matched
  --no-line                    Does not show line number which pattern was matched, default is true
  --no-markdown, --no-md       Does not show markdown separator symbol in output MD file
  --no-sort                    Enumerate todos in the pattern order found accordingly to specified order patterns

  -q, --quiet, --silent        Do not write todos to standard output
  -d, --delete                 Delete matches inside file, default is 'todos'
"""

def makeArgs():
    # Custom help message
    class MyArgumentParser(argparse.ArgumentParser):
        def format_help(self):
            return helpMessage

    parser = MyArgumentParser()

    parser.add_argument("-o", "--output-file", type=argparse.FileType('w'))
    parser.add_argument("-q", "--quiet", "--silent",      action="store_true")
    parser.add_argument("--no-filename",                  action="store_false")
    parser.add_argument("--no-markdown", "--no-md",       action="store_false")
    parser.add_argument("--no-sort",                      action="store_false")
    parser.add_argument("--no-line",                      action="store_false")
    parser.add_argument("-d", "--delete",                 const="todo", nargs='?')
    parser.add_argument("-t", "--target")
    parser.add_argument("--summary")
    parser.add_argument("--bullet")
    parser.add_argument("file", nargs='?', type=argparse.FileType('r'))

    args = parser.parse_args();

    if args.bullet and len(args.bullet) > 1:
        print("toad: error: bullet symbol must have only 1 character: " + args.bullet)
        return None

    return args

def parseMatch(line, target):
    todoFormatRegex = re.compile("{}[^ \n]*:".format(target), re.IGNORECASE)
    numberSurroundedRegex = re.compile("\((\d*)\)|\[(\d*)\]|\((\d*)\)|{(\d*)}")

    match = re.findall(todoFormatRegex, line)

    if not match:
        return None, None

    match = match[0]
    number = re.findall(r"\d+", match)

    if number: return match, int(number[0])

    return match, None

def grepTodos(files, target, isSortActive):
    todos = []
    positionalTodos = []

    for file in files:
        with open(file) as f:
            for i, line in enumerate(f):
                if target in line.lower():
                    number = 0
                    if isSortActive:
                        (match, number) = parseMatch(line, target)
                    else:
                        match = parseMatch(line, target)

                    if not match: continue

                    todo = {"body": line.strip(), "lineNumber": i+1, "filename": file}

                    if number:
                        positionalTodos.append([todo, number])
                    else:
                        todos.append(todo)

    if positionalTodos:
        return todos, positionalTodos
    else:
        return todos, None

def bubbleSort(positionalTodos):
    length = len(positionalTodos)
    for i in range(length, 1, -1):
        for j in range(0, i-1):
            x = positionalTodos[j][1]
            y = positionalTodos[j+1][1]
            if x > y:
                positionalTodos[j], positionalTodos[j+1] = \
                positionalTodos[j+1], positionalTodos[j]
            else:
                pass

    return positionalTodos
    
def sortTodos(todos, positionalTodos):
    positionalTodos = bubbleSort(positionalTodos)

    for todo in positionalTodos:
        todos.insert(todo[1]-1, todo[0])

    return todos

def formatTodos(todos, isFilenameActive=True, isSortActive=True, isLineNumberActive=True, isToFormatSummary=True, isToFormatNumber=True, summary=None, bulletSymbol=None):

    # User futurally choice.
    if isToFormatSummary is True:
        if summary is None: summary = "TODO"

    if bulletSymbol is None: bulletSymbol = "â€¢"

    newTodos = []
    for i, todo in enumerate(todos):
        lineNumber = todo["lineNumber"]
        dict = {}

        if isFilenameActive is True:
            filename = todo["filename"]
            dict["filename"] = "{}".format(filename)

        if isToFormatSummary is False:
            body = todo["body"].strip()
            dict["body"] = "{}".format(body)
        else:
            body = todo["body"].split(":")[1].strip()

            if isSortActive:
                dict["body"] = "{} {}[{}]: {}".format(bulletSymbol, summary, i+1, body)
            else:
                dict["body"] = "{} {}: {}".format(bulletSymbol, summary, body)

        if isLineNumberActive:
            if isToFormatNumber is True:
                dict["lineNumber"] = "{}".format(lineNumber)
            else:
                dict["lineNumber"] = lineNumber

        newTodos.append(dict)

    return newTodos

def printTodos(todos, highlightMatch=False, target="todo"):
    # Get biggest string length to format as box
    biggestLength = 0
    for todo in todos:
         if (len(todo["body"]) > biggestLength):
             biggestLength = len(todo["body"])

    separator = '-' * (biggestLength+2)

    print(separator)
    for todo in todos:
        emptySpace = ' ' * (len(separator) - len(todo["body"]))

        if highlightMatch:
            todo_match = re.findall(target, todo["body"], re.IGNORECASE)[0]
            todo["body"] = todo["body"].replace(todo_match, "{}{}{}".format(Style.BRIGHT + Fore.RED, todo_match, Style.RESET_ALL))

        print(todo["body"] + emptySpace + '|')

        if "filename" in todo:
            filename = todo["filename"]
            if "lineNumber" in todo:
                lineNumber = "{}".format(todo["lineNumber"])
                emptySpace = ' ' * (len(separator) - (len(lineNumber) + len(filename)+1))
                str = "{}{}{}:{}{}|".format(Fore.YELLOW, filename, Style.RESET_ALL, lineNumber, emptySpace)
            else:
                emptySpace = ' ' * (len(separator) - (len(filename)))
                str = "{}{}{}{}|".format(Fore.YELLOW, filename, Style.RESET_ALL, emptySpace)

            print(str)

        print(separator)


def writeTodos(todos, outputFile, isMarkdownActive, isFilenameActive, isLineNumberActive):
    for todo in todos:
        outputFile.write(todo["body"])
        outputFile.write('\n')

        if "filename" in todo and isFilenameActive:
            outputFile.write(todo["filename"])
            if "lineNumber" in todo and isLineNumberActive:
                outputFile.write(":{}".format(todo["lineNumber"]))

            outputFile.write('\n')

        if isMarkdownActive:
            if outputFile.name.endswith('.md'):
                outputFile.write("---")
                outputFile.write('\n')

        if todo != todos[-1]:
            outputFile.write('\n')

    outputFile.close()
    print("To-dos added to {}{}{} file".format(Style.BRIGHT + Fore.RED, outputFile.name, Style.RESET_ALL))

def printMatches(count, target):
    target = target if target else "todo"

    print("Found {}{}{} matches for {}{}{}"
          .format(Style.BRIGHT + Fore.RED,
                  count, Style.RESET_ALL,
                  Style.BRIGHT + Fore.RED,
                  target, Style.RESET_ALL,))

def deletePrompt(prompt):
    while "Invalid answer":
        reply=str(input(prompt + " [y/n]: ").lower().strip())
        if reply[:1] == 'y':
            return True
        if reply[:1] == 'n':
            return False

        print("Invalid answer")

def deleteTodos(file, target):
    isFilenameActive = True
    isLineNumberActive = True
    isSortActive = False
    isToFormatSummary = False
    isToFormatNumber = False

    todos = grepTodos(file, target, isSortActive)[0] # Index 0 because it's not sorted
    printMatches(len(todos), target)

    if not todos[0]: # If array is empty
        printMatches(len(args.file)-1, args.target)
        exit(1)

    todos = formatTodos(todos, isFilenameActive, isSortActive, isLineNumberActive, isToFormatSummary, isToFormatNumber)

    highlightMatch = True
    printTodos(todos, highlightMatch, target)

     # Double check
    isToDelete = deletePrompt("Are you sure you want to delete ALL todos in this file?")

    if isToDelete is False: exit(0)

    data = []
    for file in todos:
        with open(file["filename"], "r+") as f:
            for i, line in enumerate(f):
                isToDeleteLine = False;

                for todo in todos:
                    if i+1 == todo["lineNumber"]:
                        isToDeleteLine = True
                        break;

                if isToDeleteLine is False: data.append(line)

            f.seek(0)

            for line in data:
                f.write(line)

            f.truncate()

    print("All matches has been deleted from file!")
    exit(0)


def main():
    fileExtensions = [
        "py",
        "c",
        "rb",
        "cpp",
        "js",
        "rs",
        "s",
        "cs",
        "java",
        "sh",
        "ts",
        "r",
        "pl",
        "php",
        "go",
        "awk"]

    args = makeArgs()

    if not args.target:
        args.target = "todo"

    if not args.file:
        args.file = finder.findInFiles(args.target, fileExtensions)
    else:
        args.file = [args.file.name]

    if not args.file[0]: # If array is empty
        printMatches(len(args.file)-1, args.target)
        exit(1)

    if (args.delete):
        deleteTodos(args.file, args.delete)

    if not args:
        print(helpMessage)
        exit(1)

    todos = grepTodos(args.file, args.target, args.no_sort)

    if todos[1]: # If todos has positional arrays
        todos = sortTodos(todos[0], todos[1])
    else:
        todos = todos[0]

    isFilenameActive = args.no_filename; # Default is true
    isSortActive = args.no_sort; # Default is true
    isLineNumberActive = args.no_line # Default is True
    isToFormatSummary = True
    isToFormatNumber = True


    printMatches(len(todos), args.target)

    if args.output_file:
        writeTodos(todos, args.output_file, args.no_markdown, args.no_filename, args.no_line)

    todos = formatTodos(todos, isFilenameActive, isSortActive, isLineNumberActive, isToFormatSummary, isToFormatNumber, args.summary, args.bullet)

    if not args.quiet:
        highlightMatches = True
        printTodos(todos, highlightMatches)



if __name__ == "__main__":
    main()
    exit(0)
